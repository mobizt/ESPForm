#ifndef ESPFORM_VERSION
#define ESPFORM_VERSION "1.0.6"
#endif

/**
 * The ESPForm for Arduino v 1.0.7
 *
 * November 19, 2022
 *
 * The simple HTML Form Elements data interchange library for ESP32/ESP8266 through the Webserver.
 *
 * This allows user to send and receive the HTML form elements to/from device (ESP32/ESP8266).
 *
 * The supported HTML Form Elements are input, select, option, textarea, radio, checkbox and button.
 *
 * Thesse HTML form elements can add the eventlistener to send the data based on events to the device (ESP32/ESP8266).
 *
 * The supported devices are Espressif's ESP32 and ESP8266 MCUs.
 *
 *
 * This library based on the Wrbsocket library from Markus Sattler with some modification to proper working with BearSSL WiFi client for ESP8266.
 *
 * The MIT License (MIT)
 * Copyright (c) 2022 K. Suwatchai (Mobizt)
 *
 *
 * Permission is hereby granted, free of charge, to any person returning a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include <Arduino.h>

#ifndef ESPFormClass_H
#define ESPFormClass_H

#ifdef ESP32
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiClient.h>
#include <WebServer.h>
#include <ESPmDNS.h>
#include <FS.h>
#include <SPIFFS.h>
#include <functional>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Schedule.h>
#include <ets_sys.h>
#define FS_NO_GLOBALS
#include <FS.h>
#define SD_CS_PIN 15
#ifdef __GNUC__
#if __GNUC__ > 4 || __GNUC__ == 10
#include <string>
#ifndef ESP8266_CORE_SDK_V3_X_X
#define ESP8266_CORE_SDK_V3_X_X
#endif
#endif
#endif
#endif

#include "ESPFormFS.h"

#include <vector>
#include <DNSServer.h>
#include "webSockets/WebSocketsServer.h"

#if defined(ESP32) || defined(ESP8266)
#if defined(ESPFORM_USE_PSRAM)
#define FIREBASEJSON_USE_PSRAM
#endif
#endif

#include "mbfs/MB_FS.h"
#include "MIMEInfo.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

#ifndef ESP_DEFAULT_TS
#define ESP_DEFAULT_TS 1618971013
#endif

static const char espform_str_1[] PROGMEM = "\r\n<script src=\"espform.js\"></script>\r\n";
static const char espform_str_2[] PROGMEM = "task";
static const char espform_str_3[] PROGMEM = "_ref";
static const char espform_str_4[] PROGMEM = "ESPForm";
static const char espform_str_5[] PROGMEM = "Location";
static const char espform_str_6[] PROGMEM = "http://";
static const char espform_str_7[] PROGMEM = "text/plain";
static const char espform_str_8[] PROGMEM = "Content-Encoding";
static const char espform_str_9[] PROGMEM = "gzip";
static const char espform_str_10[] PROGMEM = "Cache-Control";
static const char espform_str_11[] PROGMEM = "no-cache, no-store, must-revalidate";
static const char espform_str_12[] PROGMEM = "index.html";
static const char espform_str_13[] PROGMEM = "/";
static const char espform_str_14[] PROGMEM = "[";
static const char espform_str_15[] PROGMEM = "]/";
static const char espform_str_16[] PROGMEM = "id";
static const char espform_str_17[] PROGMEM = "event";
static const char espform_str_18[] PROGMEM = "value";
static const char espform_str_19[] PROGMEM = "{\"type\":\"get\",\"id\":\"";
static const char espform_str_20[] PROGMEM = "{\"type\":\"set\",\"id\":\"";
static const char espform_str_21[] PROGMEM = "\",\"value\":\"";
static const char espform_str_22[] PROGMEM = "\"}";
static const char espform_str_23[] PROGMEM = "esp";
static const char espform_str_24[] PROGMEM = "max-age=0";
static const char espform_str_25[] PROGMEM = "/favicon.ico";
static const char espform_str_26[] PROGMEM = "/espform.js";
static const char espform_str_27[] PROGMEM = "/espform_app.js";
static const char espform_str_28[] PROGMEM = ".html";
static const char espform_str_29[] PROGMEM = "type";
static const char espform_str_30[] PROGMEM = "event";
static const char espform_str_31[] PROGMEM = "get";
static const char espform_str_32[] PROGMEM = "espf.sv(\"";
static const char espform_str_33[] PROGMEM = "\",\"";
static const char espform_str_34[] PROGMEM = "\");\r\n";
static const char espform_str_35[] PROGMEM = "espf.av(\"";
static const char espform_str_36[] PROGMEM = "\",";
static const char espform_str_37[] PROGMEM = ");\r\n";
static const char espform_str_38[] PROGMEM = "404: File Not Found";
static const char espform_str_39[] PROGMEM = "undefined";
static const char espform_str_40[] PROGMEM = "onclick";
static const char espform_str_41[] PROGMEM = "ondblclick";
static const char espform_str_42[] PROGMEM = "onmousedown";
static const char espform_str_43[] PROGMEM = "onmousemove";
static const char espform_str_44[] PROGMEM = "onmouseout";
static const char espform_str_45[] PROGMEM = "onmouseover";
static const char espform_str_46[] PROGMEM = "onmouseup";
static const char espform_str_47[] PROGMEM = "onmousewheel";
static const char espform_str_48[] PROGMEM = "onwheel";
static const char espform_str_49[] PROGMEM = "onkeydown";
static const char espform_str_50[] PROGMEM = "onkeypress";
static const char espform_str_51[] PROGMEM = "onkeyup";
static const char espform_str_52[] PROGMEM = "onchange";
static const char espform_str_53[] PROGMEM = "onsubmit";
static const char espform_str_54[] PROGMEM = "oninput";
static const char espform_str_55[] PROGMEM = "onfocus";
static const char espform_str_56[] PROGMEM = "oncontextmenu";
static const char espform_str_57[] PROGMEM = "onselect";
static const char espform_str_58[] PROGMEM = "onsearch";
static const char espform_str_59[] PROGMEM = "onreset";
static const char espform_str_60[] PROGMEM = "oninvalid";
static const char espform_str_61[] PROGMEM = "pool.ntp.org";
static const char espform_str_62[] PROGMEM = "time.nist.gov";
static const char espform_str_63[] PROGMEM = "WEP";
static const char espform_str_64[] PROGMEM = "TKIP";
static const char espform_str_65[] PROGMEM = "CCMP";
static const char espform_str_66[] PROGMEM = "None";
static const char espform_str_67[] PROGMEM = "Auto";
static const char espform_str_68[] PROGMEM = "WPA_PSK";
static const char espform_str_69[] PROGMEM = "WPA2_PSK";
static const char espform_str_70[] PROGMEM = "WPA_WPA2_PSK";
static const char espform_str_71[] PROGMEM = "WPA2_ENTERPRISE";
static const char espform_str_72[] PROGMEM = "MAX";
static const char espform_str_73[] PROGMEM = "DEBUG:  WS get Element value";
static const char espform_str_74[] PROGMEM = "DEBUG:  WS set Element value";
static const char espform_str_75[] PROGMEM = "DEBUG:  WS run script";
static const char espform_str_76[] PROGMEM = "DEBUG:  Soft-AP enable failed!";
static const char espform_str_77[] PROGMEM = "DEBUG:  Soft-AP SSID: %s, PSW: %s, IP: %s\n";
static const char espform_str_78[] PROGMEM = "DEBUG:  Soft-AP start failed!";
static const char espform_str_79[] PROGMEM = "DEBUG:  DNS server started.";
static const char espform_str_80[] PROGMEM = "DEBUG:  HTTP server started.";
static const char espform_str_81[] PROGMEM = "DEBUG:  WebSocket server started.";
static const char espform_str_82[] PROGMEM = "DEBUG:  Server sends response: ";
static const char espform_str_83[] PROGMEM = "DEBUG:  WS IO error with client [%u]\n";
static const char espform_str_84[] PROGMEM = "DEBUG:  WS Disconnected from client [%u]!\n";
static const char espform_str_85[] PROGMEM = "DEBUG:  WS Connected with client [%u]\n";
static const char espform_str_86[] PROGMEM = "DEBUG:  WS Get text payload [%u] from client [%u]\n";

static const uint8_t favicon_gz[] PROGMEM = {
    0x1F, 0x8B, 0x08, 0x08, 0xFD, 0x2F, 0xAC, 0x5E, 0x04, 0x00, 0x66, 0x61, 0x76, 0x69, 0x63, 0x6F,
    0x6E, 0x2E, 0x69, 0x63, 0x6F, 0x00, 0xC5, 0x9B, 0x05, 0xC8, 0x15, 0x41, 0x10, 0xC7, 0x57, 0xCF,
    0xEE, 0xEE, 0xEE, 0x6E, 0x45, 0xEC, 0x42, 0x04, 0x13, 0xC1, 0x16, 0x13, 0xB1, 0x5B, 0xEC, 0xEE,
    0xEE, 0xEE, 0xC0, 0x4E, 0x6C, 0x51, 0xB1, 0x5B, 0xEC, 0xEE, 0x2E, 0xEC, 0xEE, 0xF3, 0x3F, 0x9F,
    0x7F, 0xF5, 0xD4, 0x8B, 0xBD, 0xE7, 0x53, 0x07, 0x7E, 0xCC, 0xFB, 0xDE, 0xBB, 0x9D, 0x99, 0xDB,
    0xBA, 0xDD, 0xB9, 0xFD, 0x94, 0x0A, 0xA5, 0x0C, 0x95, 0x23, 0x87, 0xE8, 0x14, 0x6A, 0x51, 0x5A,
    0xA5, 0xF2, 0x29, 0xA5, 0x52, 0xA4, 0xE0, 0xDF, 0x31, 0x94, 0xBA, 0x82, 0xEF, 0x62, 0xC4, 0xF8,
    0xFA, 0x77, 0x93, 0x30, 0x4A, 0x0D, 0xC4, 0x05, 0x19, 0x70, 0x4D, 0x0E, 0x50, 0x4F, 0x7D, 0xFD,
    0x3E, 0x44, 0xD2, 0xA8, 0xA0, 0xCB, 0xC1, 0x61, 0x25, 0xC2, 0x80, 0x14, 0xA0, 0x12, 0xE8, 0x07,
    0x56, 0x80, 0xC3, 0xE0, 0x0A, 0xB8, 0x03, 0x6E, 0x83, 0xCB, 0xE0, 0x20, 0x58, 0x0A, 0x7A, 0x83,
    0xF2, 0x20, 0x19, 0x30, 0xD4, 0x7F, 0x12, 0xF8, 0x8E, 0x07, 0xAA, 0x82, 0xB9, 0xE0, 0x3C, 0x78,
    0x05, 0x3E, 0x03, 0xD3, 0x0D, 0x5E, 0xF3, 0x12, 0x9C, 0x05, 0x33, 0x41, 0x65, 0x10, 0x47, 0xFD,
    0x23, 0x81, 0xAF, 0xC4, 0xA0, 0x3D, 0x38, 0x0A, 0xDE, 0x6B, 0xC4, 0xEB, 0xC5, 0x3B, 0x70, 0x08,
    0xB4, 0x02, 0x09, 0xD4, 0x5F, 0x12, 0xD8, 0x8E, 0x0C, 0xEA, 0x82, 0x63, 0xE0, 0x93, 0x46, 0x5C,
    0x7E, 0xF9, 0xC8, 0xFB, 0xA8, 0x01, 0x22, 0x2A, 0x9F, 0x82, 0x32, 0xA1, 0x40, 0x26, 0x10, 0xC9,
    0xE6, 0xB7, 0x74, 0x60, 0x01, 0x78, 0xAB, 0x11, 0xC7, 0x9F, 0xF2, 0x1A, 0xCC, 0x02, 0xA9, 0x94,
    0x4F, 0x41, 0x99, 0x91, 0xA0, 0x17, 0x08, 0x6F, 0xF9, 0xAE, 0x14, 0x38, 0xAE, 0xE1, 0x37, 0xD8,
    0x48, 0x5B, 0x14, 0x51, 0x3E, 0x04, 0xD7, 0x4F, 0x66, 0x9F, 0xEE, 0x0A, 0x22, 0x80, 0x6A, 0xE0,
    0xB6, 0x86, 0xAF, 0xBF, 0xC5, 0x35, 0x50, 0x51, 0x69, 0x0A, 0xAE, 0x9D, 0xC4, 0x72, 0x2F, 0xC0,
    0x12, 0x70, 0x57, 0xC3, 0x87, 0x53, 0x5F, 0x7E, 0x09, 0x9E, 0x90, 0x57, 0xF2, 0x9D, 0x46, 0xB9,
    0xDF, 0xE0, 0x1C, 0x5C, 0x49, 0x69, 0x88, 0xC4, 0xAF, 0x61, 0xCF, 0x69, 0x4E, 0xBC, 0x07, 0xD6,
    0xB3, 0xFF, 0x55, 0x01, 0x85, 0x40, 0x2E, 0x52, 0x98, 0x6D, 0xD9, 0x17, 0x6C, 0x02, 0x0F, 0x34,
    0xE7, 0x5A, 0x6B, 0x3B, 0x14, 0xFD, 0x0B, 0xF1, 0x4B, 0x0C, 0xE7, 0x40, 0x4F, 0x90, 0x4D, 0xFA,
    0x9C, 0x86, 0x8F, 0x88, 0x20, 0x27, 0x9F, 0x75, 0x97, 0x34, 0x7C, 0x7C, 0xE3, 0x30, 0x48, 0x13,
    0xC4, 0xF8, 0xA5, 0x5F, 0x0C, 0x07, 0x29, 0x55, 0x00, 0xC2, 0xF9, 0x2E, 0x2D, 0x18, 0x07, 0x9E,
    0x6B, 0xF8, 0x13, 0xE6, 0xC8, 0xFD, 0x07, 0x21, 0x7E, 0xA9, 0xF3, 0x8A, 0x20, 0x8C, 0xFA, 0x43,
    0x81, 0x8D, 0xB0, 0xEC, 0x5B, 0x97, 0x35, 0xFC, 0xBE, 0x01, 0x75, 0xFE, 0x30, 0xFE, 0x43, 0x20,
    0x8F, 0x0A, 0xB2, 0xC0, 0x66, 0x41, 0x70, 0x4A, 0xC3, 0xFF, 0x11, 0x90, 0xF8, 0x0F, 0xE2, 0x1F,
    0x0F, 0xC2, 0xA9, 0xBF, 0x20, 0x72, 0x0F, 0x1A, 0x63, 0x42, 0xC6, 0x5C, 0x87, 0x3F, 0x88, 0xFF,
    0x35, 0xE8, 0x1E, 0xF2, 0x8C, 0xFB, 0x0B, 0xC2, 0xB9, 0xEB, 0x99, 0x47, 0x0C, 0x47, 0x41, 0x82,
    0x00, 0xE3, 0xFF, 0xD6, 0x0F, 0x7B, 0xFC, 0x8D, 0x7B, 0xE0, 0x7A, 0x7C, 0x94, 0x87, 0xFF, 0x0F,
    0xA0, 0x86, 0x4D, 0xD9, 0x11, 0x9C, 0x0B, 0x1E, 0x7B, 0xF0, 0x84, 0xCF, 0xB6, 0x16, 0x7F, 0x63,
    0x0D, 0x2F, 0xF3, 0x24, 0x38, 0xE7, 0x71, 0x0F, 0xF3, 0xE5, 0x5E, 0x7F, 0x29, 0x97, 0x14, 0xE4,
    0xD4, 0x24, 0x17, 0xC8, 0x68, 0xB5, 0x21, 0xF7, 0x02, 0xB2, 0x83, 0x24, 0xEA, 0x0F, 0x45, 0xDA,
    0xD7, 0x2D, 0x7E, 0x8E, 0x93, 0xA0, 0xEE, 0xC8, 0x64, 0x1F, 0xC2, 0xF9, 0xE9, 0x0C, 0x68, 0xF9,
    0x27, 0xFB, 0x12, 0x94, 0xCD, 0x2A, 0x6D, 0xEC, 0xD1, 0x87, 0xAB, 0xA8, 0x20, 0x0A, 0xEC, 0xC5,
    0x0F, 0x69, 0xF7, 0x1F, 0x7D, 0x74, 0x37, 0xF7, 0x68, 0x91, 0x95, 0x4F, 0x91, 0xB1, 0x05, 0x56,
    0x7B, 0xB4, 0xC1, 0x50, 0x15, 0x44, 0x61, 0xFC, 0x67, 0x6D, 0xE6, 0xAB, 0x55, 0xA0, 0x38, 0x08,
    0xAB, 0x7C, 0x88, 0xAC, 0x83, 0x3D, 0xE2, 0x5F, 0xA7, 0x82, 0x28, 0xBF, 0xC7, 0xFF, 0x03, 0x8E,
    0xFB, 0x29, 0x5C, 0x27, 0x85, 0x56, 0x1A, 0x22, 0xCF, 0x78, 0x8F, 0x3D, 0xEA, 0x29, 0x15, 0x44,
    0x71, 0x8D, 0xFF, 0x07, 0x37, 0xB9, 0x0E, 0x4D, 0xAE, 0x61, 0x2F, 0x9F, 0xC7, 0xB3, 0xE0, 0x8E,
    0x0A, 0xA2, 0x68, 0xC6, 0x2F, 0x7C, 0xE6, 0x18, 0x6F, 0xE8, 0x36, 0xFF, 0x32, 0xC7, 0x32, 0x1B,
    0xAC, 0x04, 0x2B, 0x6C, 0x98, 0x5B, 0x61, 0xF9, 0xD3, 0x91, 0x60, 0xAC, 0x0D, 0xE3, 0x40, 0x3F,
    0xA0, 0x3D, 0x87, 0xF8, 0x88, 0xDF, 0x64, 0xBD, 0x0E, 0x04, 0xE1, 0x3C, 0xD6, 0xA8, 0x86, 0x1B,
    0x88, 0xEF, 0x39, 0x30, 0x1D, 0x78, 0x00, 0x32, 0x2B, 0x4D, 0xD1, 0x8C, 0xFF, 0x35, 0xEB, 0xB3,
    0x98, 0xDF, 0xF1, 0x6C, 0x27, 0x88, 0xEF, 0x86, 0x4B, 0xFC, 0xAF, 0x40, 0x31, 0xA5, 0x29, 0xAE,
    0xF1, 0xFF, 0x98, 0x4F, 0xAB, 0x04, 0x32, 0x9F, 0xBA, 0xC4, 0xBF, 0x4F, 0x62, 0x75, 0xA1, 0xB1,
    0xD2, 0x94, 0xEF, 0xF1, 0xFF, 0xDE, 0xD7, 0x4F, 0x73, 0xAD, 0x11, 0x5B, 0x05, 0x59, 0x10, 0xDF,
    0x4C, 0x8F, 0xF8, 0x67, 0x01, 0xDD, 0xF9, 0xEE, 0xD7, 0xF8, 0x6F, 0x71, 0x9F, 0x98, 0x42, 0xFD,
    0x25, 0x41, 0x6C, 0xCD, 0xC0, 0x07, 0x97, 0xF8, 0xCF, 0x83, 0x64, 0x4A, 0x43, 0x10, 0x67, 0x4C,
    0x70, 0x98, 0x63, 0x73, 0x1A, 0xC8, 0xAE, 0x3B, 0xD7, 0x07, 0x2A, 0x88, 0x2D, 0x37, 0xB8, 0xEB,
    0x12, 0xFF, 0x47, 0xD0, 0x48, 0x69, 0x88, 0xC4, 0xCA, 0xBC, 0x43, 0x01, 0x9D, 0x3D, 0x0E, 0xEC,
    0x86, 0x01, 0x49, 0xA4, 0x7E, 0x40, 0x52, 0x0D, 0xE4, 0xBA, 0x18, 0xBF, 0xD8, 0x88, 0x0C, 0x36,
    0x7A, 0xF4, 0xA1, 0xBD, 0x20, 0xAE, 0x0A, 0xB2, 0xC0, 0x66, 0x38, 0xD0, 0x0D, 0x5C, 0x01, 0x57,
    0x35, 0xB8, 0x01, 0xBA, 0xD8, 0xD8, 0x69, 0x2D, 0x71, 0x7A, 0xB4, 0x41, 0x07, 0xF5, 0x17, 0x04,
    0x76, 0x63, 0x81, 0x19, 0xE0, 0x93, 0xF8, 0xD2, 0x60, 0x98, 0x8D, 0x8D, 0xB4, 0x72, 0x7F, 0x1E,
    0xE5, 0x6E, 0x81, 0x42, 0xEA, 0x2F, 0x08, 0xEC, 0xC6, 0x04, 0xD3, 0x34, 0xEF, 0x61, 0xA8, 0x4D,
    0xF9, 0x50, 0x60, 0xB8, 0x46, 0xD9, 0x7D, 0x72, 0xAF, 0xEA, 0x2F, 0x08, 0xEC, 0x46, 0x07, 0x8B,
    0x35, 0x62, 0x18, 0xEA, 0x50, 0x3E, 0xB3, 0x46, 0x1B, 0x08, 0x9B, 0x41, 0x50, 0xF7, 0x3D, 0xF4,
    0x9F, 0x09, 0xEC, 0xD1, 0xF0, 0x3F, 0xD4, 0xC5, 0x46, 0x67, 0xCD, 0x36, 0x94, 0x76, 0x28, 0x20,
    0xED, 0xA6, 0xFE, 0x50, 0xD8, 0xF6, 0xC5, 0xC1, 0x11, 0x0D, 0xBF, 0x5E, 0xF1, 0xC7, 0x91, 0xFA,
    0xD5, 0xB0, 0x21, 0xDC, 0x04, 0xED, 0x40, 0xC0, 0xCF, 0x54, 0x94, 0x8D, 0x07, 0xBA, 0x82, 0x7B,
    0x1A, 0xFE, 0x3C, 0xE3, 0xA7, 0xCD, 0xFC, 0xE0, 0x9A, 0x86, 0x1D, 0xE1, 0x03, 0xDB, 0xBC, 0x01,
    0x48, 0xAC, 0xF3, 0x9C, 0x96, 0x6B, 0x38, 0x8F, 0x37, 0x01, 0x07, 0xC1, 0x47, 0x0D, 0x3F, 0xDA,
    0xF1, 0xD3, 0x47, 0x4D, 0xF0, 0x44, 0xC3, 0x96, 0xF5, 0x3E, 0xCE, 0x71, 0x0E, 0x69, 0x08, 0x0A,
    0x81, 0xF4, 0x12, 0x27, 0xC9, 0x00, 0x8A, 0x80, 0x46, 0x5C, 0x8F, 0x5C, 0x0C, 0x20, 0x6E, 0x3F,
    0xF1, 0x1B, 0xA0, 0x25, 0x78, 0xA1, 0x61, 0xEF, 0x57, 0x3E, 0x83, 0x97, 0x7C, 0xA6, 0x5F, 0x65,
    0x5B, 0xDE, 0xE3, 0x77, 0x9F, 0x35, 0xCA, 0xFF, 0xCA, 0x43, 0xB0, 0x13, 0xBC, 0xD7, 0x8D, 0x9F,
    0xF7, 0x10, 0x16, 0xB4, 0xF2, 0xD9, 0x0E, 0xC1, 0xE6, 0x21, 0xDB, 0x33, 0x36, 0x98, 0xFA, 0xFD,
    0xF9, 0xA5, 0x29, 0xD2, 0x0E, 0xEC, 0x4B, 0xD7, 0x35, 0x7C, 0x05, 0x9B, 0x4B, 0xA0, 0xF2, 0xB7,
    0x31, 0x05, 0x1D, 0x83, 0x6B, 0xE5, 0xC1, 0xCA, 0xA7, 0x70, 0x4C, 0x6F, 0xFD, 0x83, 0x3E, 0xEB,
    0x07, 0x19, 0x4B, 0xEB, 0x41, 0x2E, 0x87, 0xF9, 0x31, 0xAF, 0x0A, 0x40, 0x58, 0xB6, 0xCB, 0x5F,
    0x6E, 0x8B, 0xCB, 0x9C, 0x93, 0x63, 0xAA, 0xBF, 0x20, 0x7C, 0xD6, 0x64, 0xE1, 0x9E, 0xFF, 0x7A,
    0x80, 0xE3, 0xF1, 0x57, 0x3E, 0x71, 0xFD, 0x39, 0x18, 0xA4, 0x0F, 0xC6, 0x33, 0x51, 0x79, 0xDF,
    0x47, 0x68, 0x90, 0x0E, 0xB4, 0xE5, 0xF3, 0xEE, 0xBE, 0xCF, 0xBE, 0xF5, 0x81, 0xF3, 0xD3, 0x46,
    0xD0, 0x02, 0xA4, 0xD6, 0x79, 0x76, 0xFC, 0x0D, 0x81, 0xDF, 0x28, 0xD2, 0x27, 0x39, 0xDF, 0xCE,
    0x03, 0x87, 0x19, 0xDB, 0x6B, 0xD6, 0xED, 0x27, 0x7E, 0xBE, 0x03, 0x0E, 0x81, 0x39, 0xDC, 0xF3,
    0xE5, 0x02, 0x7F, 0xBC, 0x8F, 0x37, 0xCD, 0x6B, 0xE1, 0x4D, 0x13, 0xFA, 0x1B, 0x1F, 0x95, 0x2A,
    0x2A, 0xFA, 0xA9, 0x52, 0xD1, 0x45, 0x6F, 0x57, 0xCA, 0x80, 0x7E, 0xD2, 0x1B, 0xE7, 0x88, 0xA0,
    0xEF, 0x4A, 0x21, 0xE8, 0x6B, 0xA2, 0x7B, 0x89, 0x8E, 0x7E, 0x4D, 0x15, 0x15, 0xDD, 0xEB, 0xA3,
    0x4A, 0x0E, 0x2D, 0x56, 0xA2, 0x43, 0x1B, 0xA6, 0xB9, 0x5D, 0x74, 0x78, 0xF1, 0xF0, 0x55, 0x3F,
    0xA5, 0x7E, 0x6B, 0xC8, 0xEF, 0xD4, 0xA1, 0x4C, 0xF3, 0x63, 0x28, 0x98, 0x84, 0x7C, 0x0E, 0xD1,
    0x2F, 0xA8, 0x9F, 0x9A, 0x9F, 0x55, 0x88, 0x2E, 0x6A, 0x7E, 0xD5, 0xD1, 0xA9, 0x0D, 0x6A, 0x09,
    0x47, 0x02, 0xC5, 0xE7, 0x10, 0x6D, 0x50, 0x47, 0xA7, 0x2E, 0x1A, 0xA2, 0x7B, 0x3D, 0xED, 0x25,
    0xBA, 0x77, 0xAF, 0x67, 0xE6, 0x57, 0x6D, 0x7E, 0xD5, 0xF8, 0xB5, 0x37, 0xE2, 0xDB, 0x2E, 0x3A,
    0x3C, 0x74, 0x72, 0xC4, 0x2B, 0x3A, 0xFA, 0xB7, 0x78, 0xBF, 0x6A, 0xB1, 0xBA, 0x5D, 0x74, 0xA8,
    0xAF, 0xD7, 0xBD, 0x55, 0xBD, 0x3E, 0x2B, 0xE8, 0x8F, 0x2A, 0xFA, 0x53, 0xD1, 0x12, 0xA3, 0xE8,
    0x90, 0x58, 0xF6, 0x41, 0x4B, 0x3D, 0xDD, 0xFD, 0x5E, 0x6F, 0x3F, 0xEA, 0xF1, 0xAD, 0x52, 0xC9,
    0xBF, 0xD7, 0xF3, 0x8F, 0x7A, 0xCF, 0x20, 0x67, 0xB9, 0x40, 0x31, 0xEB, 0x39, 0xAD, 0x18, 0x2A,
    0x20, 0x61, 0xBE, 0x2C, 0x09, 0xA8, 0xC6, 0x77, 0x51, 0x7B, 0xC1, 0x0D, 0xE6, 0x6E, 0x1F, 0x81,
    0xEB, 0x60, 0x0F, 0x98, 0xC0, 0x3C, 0x50, 0x22, 0xF0, 0xC7, 0xE3, 0x95, 0x7E, 0x33, 0x82, 0xFE,
    0xE0, 0x24, 0x78, 0xA3, 0x91, 0xFF, 0x7B, 0xCD, 0x73, 0x29, 0x7D, 0x40, 0x3A, 0x9D, 0x38, 0xE8,
    0x27, 0xAC, 0x4D, 0xCE, 0xA2, 0x23, 0xB8, 0xA6, 0xE1, 0xD3, 0x89, 0xCB, 0xA0, 0x2D, 0x88, 0xEE,
    0xE1, 0x3F, 0x1C, 0x68, 0x06, 0x52, 0xF2, 0xEF, 0x0C, 0x60, 0xF5, 0x1F, 0x9C, 0xCD, 0xF8, 0x35,
    0x3F, 0xB7, 0x1C, 0xA4, 0xF5, 0x78, 0xD7, 0xBD, 0x06, 0xAC, 0xE7, 0x19, 0xBA, 0x43, 0x1A, 0x76,
    0xFD, 0xB2, 0x1F, 0x64, 0x77, 0xF3, 0xFF, 0xED, 0x8C, 0x8B, 0xC7, 0xF9, 0x95, 0x2B, 0x60, 0x19,
    0xF3, 0x5F, 0xAD, 0x40, 0x6B, 0xF6, 0x8F, 0x15, 0x6C, 0xAB, 0x4F, 0x1E, 0x31, 0xA4, 0x73, 0xF2,
    0xEF, 0x91, 0x17, 0x3F, 0xC1, 0x5C, 0x61, 0x4A, 0x10, 0xC6, 0xC1, 0x46, 0x6A, 0xD0, 0x06, 0x9C,
    0x76, 0x3A, 0x87, 0xC2, 0x38, 0x63, 0xF8, 0xF0, 0xFF, 0x96, 0xE7, 0x97, 0xB4, 0x72, 0x6D, 0x22,
    0x8C, 0x71, 0x26, 0x78, 0xE7, 0x50, 0x87, 0x1D, 0x7C, 0xF8, 0x1F, 0xA9, 0x73, 0x7E, 0xC5, 0xE1,
    0x5C, 0xDE, 0x20, 0xBB, 0xF7, 0x34, 0x6C, 0xC3, 0x8C, 0x9A, 0xFE, 0xD7, 0x82, 0xA4, 0x2A, 0x00,
    0x61, 0x0C, 0xD3, 0x1D, 0xEC, 0x0E, 0xD0, 0xF4, 0x2F, 0xAC, 0xD7, 0x79, 0xAF, 0xE3, 0xD2, 0x16,
    0x27, 0x6C, 0x6C, 0x9E, 0x0C, 0x69, 0xD3, 0x1F, 0xF9, 0xC5, 0xB2, 0x7C, 0xB7, 0xDA, 0xFC, 0x17,
    0x5A, 0xF0, 0xFB, 0x9C, 0xBF, 0x9C, 0xD5, 0xD4, 0xCE, 0xFB, 0xD1, 0xC6, 0x27, 0x9B, 0xF7, 0xAC,
    0xB5, 0x54, 0x00, 0x82, 0x72, 0xA3, 0x99, 0xCF, 0xAD, 0x0D, 0xA2, 0x6A, 0x5C, 0x9F, 0xD2, 0xE1,
    0x1C, 0xCD, 0x34, 0x15, 0x80, 0x58, 0xDA, 0xF4, 0x2D, 0xDB, 0xA6, 0xB4, 0xC7, 0xFB, 0x9E, 0x30,
    0x60, 0xB1, 0xDD, 0x99, 0x1B, 0x15, 0x80, 0xD8, 0xF4, 0xA9, 0x67, 0x7C, 0x1F, 0x96, 0x5B, 0xDA,
    0xD2, 0xA1, 0x4C, 0x2F, 0x1B, 0xFF, 0xB2, 0x1E, 0x0B, 0x63, 0x43, 0x28, 0x9F, 0xFE, 0xBF, 0xDB,
    0x03, 0x43, 0xED, 0xDE, 0xCF, 0xF3, 0x1C, 0xF5, 0x4E, 0xB0, 0xC3, 0xC2, 0x06, 0xF8, 0x5A, 0x06,
    0x56, 0xFD, 0x42, 0xC9, 0x00, 0xFD, 0xBF, 0xE2, 0x79, 0xD6, 0xC4, 0x0E, 0x6D, 0x10, 0xE9, 0x57,
    0xE0, 0xEB, 0xA9, 0xCD, 0x3A, 0xBA, 0x83, 0x4F, 0xFF, 0xEF, 0xC1, 0x16, 0x50, 0xDE, 0xEF, 0x5C,
    0x05, 0x5F, 0x67, 0x6C, 0xFC, 0xCF, 0x90, 0x36, 0xD0, 0xF0, 0x2F, 0x63, 0xEA, 0x28, 0xDF, 0x97,
    0x06, 0xB4, 0xBA, 0x72, 0xC8, 0x8D, 0x9E, 0x04, 0x09, 0x5C, 0xFC, 0x8F, 0xE1, 0x9A, 0xAB, 0x5B,
    0x48, 0x5D, 0xFF, 0x81, 0xC0, 0x4F, 0x53, 0x9B, 0xF7, 0x3C, 0xEF, 0x41, 0x6D, 0x8F, 0xF1, 0x9C,
    0x16, 0x84, 0x72, 0xB0, 0x99, 0x0D, 0xD4, 0x02, 0x35, 0x6C, 0xA8, 0x09, 0x0A, 0x7D, 0xAB, 0x5F,
    0xE6, 0xA0, 0x2E, 0xDB, 0xD4, 0xC1, 0x6E, 0x10, 0x5F, 0x05, 0x20, 0x28, 0x97, 0xD1, 0x92, 0xB3,
    0xFD, 0x6C, 0x85, 0xDF, 0x2D, 0x01, 0x86, 0x65, 0xCF, 0x37, 0xDE, 0x21, 0xDF, 0x34, 0x18, 0x04,
    0xF4, 0x2E, 0x96, 0x79, 0xE3, 0xDD, 0x0E, 0xFB, 0xC4, 0xA5, 0x21, 0xFE, 0x7F, 0x5C, 0x9B, 0xD7,
    0x21, 0xD7, 0xF9, 0x12, 0xB4, 0x0B, 0x24, 0x06, 0xE6, 0xA9, 0x46, 0x6A, 0xFA, 0x97, 0x3A, 0x18,
    0xF4, 0xFD, 0xF7, 0xDF, 0x63, 0x18, 0xEC, 0xE7, 0x3D, 0x93, 0xF4, 0x5D, 0xFA, 0x7E, 0xAD, 0xE3,
    0x9F, 0x65, 0x12, 0x82, 0x6D, 0x2E, 0xB9, 0x80, 0xDD, 0xEC, 0x3B, 0xF1, 0x7E, 0x1E, 0x9B, 0x3F,
    0xEE, 0x81, 0x7E, 0xEB, 0x80, 0xFD, 0xDF, 0xF2, 0xED, 0xBA, 0xFE, 0x69, 0x23, 0x0F, 0x38, 0xEB,
    0x52, 0xEE, 0x1D, 0x38, 0xC1, 0x9C, 0x5B, 0x1B, 0x19, 0x23, 0xA4, 0x2D, 0x98, 0x0E, 0x4E, 0x7D,
    0xCB, 0x27, 0x3A, 0xF0, 0xF6, 0x37, 0xFF, 0xBF, 0xC7, 0x50, 0x54, 0x62, 0xD0, 0xC8, 0x35, 0x84,
    0xF4, 0x51, 0x1F, 0xB9, 0x96, 0xE3, 0x8C, 0x75, 0x1F, 0x58, 0xFE, 0x9B, 0xFF, 0xDF, 0xEB, 0x61,
    0x87, 0x0F, 0xDB, 0x5E, 0x79, 0x9C, 0x2D, 0x20, 0xBB, 0x65, 0x6E, 0x68, 0x0F, 0xC2, 0x78, 0xF4,
    0xA1, 0x84, 0xEC, 0x77, 0xF7, 0x35, 0x7C, 0x38, 0x71, 0x17, 0xF4, 0x95, 0x3E, 0xF3, 0x8B, 0xED,
    0x88, 0x15, 0x34, 0xF2, 0x49, 0xCC, 0x93, 0xE6, 0x03, 0x13, 0x99, 0x73, 0xFE, 0xA0, 0xE1, 0x53,
    0xAE, 0xB9, 0xCC, 0xB3, 0x2E, 0xB9, 0x82, 0x91, 0xFF, 0x91, 0xBA, 0xE2, 0x3C, 0xD9, 0x9C, 0xCF,
    0xEB, 0xF3, 0x3C, 0x9F, 0xF2, 0x51, 0xEA, 0x97, 0x9F, 0xCF, 0x71, 0x5E, 0x6B, 0xCA, 0x1C, 0x96,
    0xD6, 0xF9, 0xC9, 0x90, 0xB4, 0x46, 0xEF, 0x50, 0xDF, 0x53, 0x34, 0xFB, 0x91, 0x4E, 0xD8, 0x1E,
    0xAA, 0x77, 0xF4, 0xED, 0xC9, 0xDF, 0x86, 0xDF, 0x5E, 0xF4, 0x63, 0xF8, 0xED, 0xBD, 0x3E, 0x1B,
    0xDB, 0x7B, 0x99, 0xA1, 0x90, 0xCF, 0xE8, 0x83, 0x04, 0xC7, 0x0E, 0xF3, 0x9D, 0xB9, 0xDD, 0x7C,
    0xDB, 0x0B, 0x24, 0xBF, 0x66, 0xBE, 0x0D, 0x7F, 0x2D, 0xFC, 0xDB, 0xF0, 0x66, 0xF8, 0xB7, 0xC9,
    0x4D, 0xE3, 0x6D, 0x2F, 0xD3, 0x78, 0x67, 0x9A, 0xFD, 0x4C, 0x13, 0x17, 0x7E, 0x34, 0x7A, 0x9B,
    0x28, 0x07, 0x60, 0xC3, 0xB8, 0x96, 0xFC, 0xAD, 0xF1, 0xD4, 0xD8, 0x6E, 0x20, 0x55, 0x11, 0x5B,
    0x7C, 0x7C, 0x46, 0xF6, 0x44, 0x7C, 0x8A, 0xEF, 0x0C, 0x4C, 0x4B, 0xA4, 0xB0, 0xE6, 0x29, 0xC2,
    0x78, 0xAE, 0xBF, 0xC2, 0xF2, 0x9C, 0xCC, 0x0C, 0x70, 0x11, 0xBC, 0x24, 0x17, 0x78, 0xBE, 0xA0,
    0x88, 0xCD, 0x19, 0xCE, 0x88, 0xDC, 0x9F, 0xC5, 0x03, 0x83, 0xC1, 0x03, 0x97, 0xF5, 0xFE, 0x7D,
    0x30, 0xD0, 0x7A, 0x2E, 0x44, 0x3E, 0xF3, 0x7F, 0x2F, 0x76, 0x59, 0xF6, 0xE5, 0xEF, 0xC0, 0x69,
    0xEE, 0x1D, 0xD6, 0xF2, 0xF3, 0x3B, 0xCB, 0xDA, 0x60, 0x81, 0x94, 0xB3, 0xE4, 0x13, 0x0E, 0x7E,
    0xF3, 0xC1, 0x6B, 0xEB, 0xF2, 0x6C, 0x47, 0x58, 0x92, 0x00, 0xD4, 0x07, 0xE7, 0x2D, 0xFB, 0xCE,
    0x41, 0xC0, 0xF8, 0x5E, 0xFE, 0x87, 0xED, 0x76, 0x2E, 0xF5, 0x93, 0xCF, 0x72, 0xDE, 0xF1, 0x3E,
    0xEB, 0x2A, 0x0A, 0x18, 0x62, 0x39, 0xB3, 0x35, 0x8C, 0x75, 0x11, 0x19, 0x44, 0xB3, 0xB1, 0x51,
    0xCF, 0xB2, 0x77, 0x9B, 0x19, 0xD2, 0x57, 0xBA, 0xAB, 0xD0, 0xF7, 0xFA, 0x25, 0x09, 0xCD, 0x78,
    0xC2, 0xF0, 0xBA, 0x0A, 0x60, 0x23, 0x28, 0x67, 0x5D, 0x7B, 0x85, 0xDC, 0xCB, 0x8F, 0x73, 0xE7,
    0x32, 0x1E, 0xA2, 0x97, 0x5F, 0xFE, 0x3C, 0x7A, 0xB9, 0xE5, 0xCF, 0x23, 0xFE, 0xE2, 0xA7, 0x2A,
    0xEF, 0xE7, 0x25, 0xD7, 0xE8, 0xD9, 0x2C, 0xEB, 0xC5, 0x71, 0x3C, 0x8F, 0x76, 0x90, 0x67, 0x1D,
    0x8E, 0x80, 0x61, 0x21, 0x7D, 0xFB, 0xF7, 0xF2, 0xEF, 0x18, 0xC7, 0xF7, 0x3C, 0xFC, 0xA1, 0x61,
    0xC5, 0xA3, 0x82, 0xD8, 0xD2, 0x06, 0xF2, 0x5E, 0x92, 0xE3, 0xF3, 0x28, 0x88, 0xF3, 0xCB, 0x59,
    0xC2, 0x3D, 0xA0, 0x16, 0xAE, 0x8D, 0x12, 0x75, 0x9B, 0x19, 0x8A, 0xCF, 0x92, 0x50, 0xBF, 0x8C,
    0xC1, 0x05, 0x96, 0x39, 0xBC, 0xBA, 0xA5, 0x7C, 0x34, 0xB1, 0xFF, 0xCB, 0xB3, 0x6F, 0x30, 0x98,
    0xCF, 0x32, 0xBD, 0x41, 0x24, 0x50, 0x06, 0x3C, 0xA2, 0x8D, 0x13, 0x20, 0x9B, 0xCB, 0x78, 0xEF,
    0x64, 0x99, 0x7B, 0xF7, 0x49, 0xDD, 0xF1, 0x79, 0x3E, 0x26, 0xE4, 0xBB, 0x1F, 0x36, 0xAA, 0x81,
    0x58, 0x8C, 0xD7, 0xE0, 0xFB, 0xA0, 0x1A, 0xFC, 0xCD, 0xB4, 0x96, 0xB7, 0xC4, 0xB6, 0xD2, 0xF2,
    0xDB, 0x1B, 0xD6, 0xE9, 0x12, 0x3E, 0x93, 0x8E, 0x86, 0x7C, 0xF7, 0x63, 0xDE, 0x3E, 0xC0, 0xF9,
    0x26, 0xA6, 0xF5, 0xFE, 0x18, 0xC7, 0x63, 0x97, 0x39, 0xF0, 0x11, 0x9F, 0xFF, 0x09, 0x39, 0x6F,
    0x45, 0xFC, 0xE5, 0xFE, 0xC2, 0xB3, 0x3E, 0x16, 0xF2, 0xFC, 0xC4, 0x07, 0x72, 0x93, 0x75, 0x56,
    0x1A, 0xFC, 0xB4, 0x9F, 0x7B, 0x8B, 0xDD, 0xB7, 0xE4, 0x4D, 0x7B, 0xA3, 0xE5, 0x07, 0x5D, 0x57,
    0x6A, 0xD4, 0x33, 0x68, 0x4C, 0x28, 0x9F, 0x85, 0xFC, 0x4A, 0x25, 0x2B, 0x0A, 0x4C, 0x4C, 0x5E,
    0xDF, 0x7E, 0x83, 0xDE, 0x1E, 0x4A, 0xCA, 0x7C, 0x2D, 0xFB, 0x05, 0x50, 0xB4, 0x59, 0x84, 0xEE,
    0x3A, 0x00, 0x00};

static const uint8_t espform_js_gz[] PROGMEM = {

    0x1F, 0x8B, 0x08, 0x08, 0x85, 0xC5, 0xB6, 0x5E, 0x04, 0x00, 0x65, 0x73, 0x70, 0x66, 0x6F, 0x72,
    0x6D, 0x2E, 0x6A, 0x73, 0x00, 0x95, 0x18, 0x09, 0xCF, 0xD2, 0x30, 0xF4, 0xAF, 0x48, 0x63, 0x70,
    0x95, 0x39, 0xF9, 0xBC, 0xDD, 0x9C, 0x78, 0x61, 0xD4, 0x78, 0x45, 0xF1, 0x48, 0x00, 0x4D, 0xD9,
    0xFA, 0x41, 0x75, 0xAC, 0x64, 0x2D, 0x28, 0x81, 0xFD, 0x77, 0xDF, 0x6B, 0x3B, 0x36, 0x0E, 0xAF,
    0xE4, 0xCB, 0xC7, 0xDE, 0xEB, 0xBB, 0xCF, 0x6E, 0x49, 0xC6, 0x94, 0xBA, 0xD0, 0x7F, 0xFF, 0xF6,
    0xA9, 0x2C, 0xE6, 0x9B, 0x44, 0xE6, 0x4A, 0x17, 0xCB, 0x44, 0xCB, 0xC2, 0xA3, 0x1B, 0x3D, 0x13,
    0x2A, 0xF8, 0xC1, 0x27, 0x4A, 0x26, 0xDF, 0xB9, 0x8E, 0xF3, 0x65, 0x96, 0xF9, 0x16, 0xA7, 0x12,
    0xF9, 0x3D, 0x6E, 0x9D, 0x59, 0x68, 0x59, 0x64, 0x31, 0xF9, 0xA1, 0xC2, 0xAB, 0x57, 0x49, 0x27,
    0x93, 0x09, 0xD3, 0x42, 0xE6, 0xC1, 0x4C, 0x2A, 0x9D, 0xB3, 0x39, 0xEF, 0x90, 0xF0, 0xCE, 0xD9,
    0x55, 0x52, 0xF1, 0xE9, 0xB9, 0xB4, 0x8F, 0x49, 0xFD, 0x24, 0x27, 0xDF, 0xE2, 0x4D, 0x69, 0x01,
    0xBE, 0xB2, 0x50, 0x39, 0xE5, 0x1E, 0xF7, 0x35, 0xDD, 0xAC, 0x58, 0x71, 0x41, 0x19, 0xD5, 0x51,
    0xC1, 0xF5, 0xB2, 0xC8, 0x01, 0x32, 0x94, 0x29, 0x3F, 0xF7, 0x34, 0xED, 0xE9, 0x60, 0xCA, 0x75,
    0x3F, 0xE3, 0x73, 0x9E, 0xEB, 0x47, 0xEB, 0xE7, 0xA9, 0xC7, 0x69, 0x98, 0xCA, 0x64, 0x89, 0xF0,
    0xF1, 0x91, 0xBF, 0x63, 0x55, 0xB4, 0xA7, 0x42, 0x4F, 0xC5, 0x27, 0x68, 0xD5, 0xA3, 0xF5, 0x80,
    0x4D, 0x5F, 0x83, 0xF1, 0xC0, 0x31, 0xEC, 0x8E, 0x9B, 0x4C, 0xBE, 0xA2, 0x65, 0x52, 0x70, 0xA6,
    0x79, 0x3F, 0x83, 0xD3, 0x8D, 0xB3, 0x69, 0x27, 0xC5, 0x9E, 0x39, 0x41, 0x40, 0x50, 0x22, 0x5B,
    0x4D, 0xB7, 0x92, 0x22, 0xBD, 0xD0, 0x6D, 0xC5, 0x31, 0x6F, 0xB7, 0xD1, 0xA7, 0x56, 0xCC, 0x4B,
    0xA1, 0xDE, 0x4C, 0xBE, 0xF1, 0x44, 0xD7, 0x64, 0x44, 0x1A, 0x04, 0x89, 0x63, 0xBD, 0x5E, 0x70,
    0x79, 0x7E, 0x81, 0x97, 0x33, 0xA6, 0xEA, 0xF3, 0x56, 0xAB, 0xB2, 0x08, 0x70, 0xED, 0xB6, 0xE7,
    0x60, 0x56, 0x14, 0x6C, 0x0D, 0x98, 0xED, 0xD6, 0x3B, 0x96, 0xB0, 0xDD, 0x76, 0x41, 0x59, 0x90,
    0xF1, 0x7C, 0xAA, 0x67, 0xC0, 0x43, 0x94, 0x16, 0xF9, 0x94, 0xB4, 0x0E, 0x09, 0x74, 0x21, 0xE6,
    0x1E, 0x75, 0x74, 0x94, 0xD2, 0xD2, 0x4A, 0xAD, 0x5D, 0x78, 0x88, 0x70, 0x20, 0x94, 0xF9, 0x45,
    0x0F, 0x93, 0x4C, 0xD9, 0x54, 0x89, 0x73, 0x6F, 0xCF, 0x2E, 0x03, 0xA0, 0xE1, 0x9A, 0xD2, 0x73,
    0x28, 0x28, 0x9B, 0x4A, 0x1D, 0xA8, 0x45, 0x26, 0xB4, 0x47, 0x2E, 0x10, 0xEA, 0x8B, 0xB8, 0x1B,
    0x89, 0x7B, 0xCA, 0xA9, 0x8B, 0x44, 0xA7, 0x43, 0x77, 0x5C, 0x6A, 0x28, 0xC6, 0x20, 0x85, 0x07,
    0xA6, 0x44, 0x5F, 0x0A, 0xA5, 0x03, 0x96, 0xA6, 0x16, 0x5D, 0x16, 0x7C, 0xFE, 0xF8, 0x5F, 0xF5,
    0xBA, 0xE0, 0xEC, 0x6B, 0x36, 0x48, 0xAB, 0x9E, 0x15, 0x27, 0xF5, 0xB3, 0xE2, 0xD8, 0x00, 0x50,
    0x2B, 0x57, 0xDC, 0x1D, 0x95, 0x6C, 0xB1, 0xE0, 0x79, 0xFA, 0x78, 0x26, 0xB2, 0xD4, 0x5A, 0xB2,
    0x67, 0x46, 0x5D, 0xA5, 0x46, 0x48, 0x83, 0x18, 0x30, 0xA5, 0x95, 0xF4, 0x8F, 0xBC, 0xD0, 0x96,
    0x9A, 0x89, 0x5C, 0x39, 0xD0, 0xF2, 0xEE, 0x44, 0x29, 0xAE, 0x9F, 0x3F, 0xB1, 0x42, 0x7E, 0x17,
    0x07, 0x48, 0x38, 0x0F, 0x44, 0x1A, 0x5B, 0x6A, 0x2C, 0xED, 0x7F, 0xA0, 0xC7, 0xF6, 0x75, 0x1C,
    0xCF, 0x06, 0xAF, 0x5E, 0xFE, 0x03, 0x87, 0xC8, 0x73, 0x5E, 0x20, 0xAD, 0x63, 0x1B, 0xF0, 0x9F,
    0xFA, 0x5F, 0xD9, 0x90, 0xD6, 0xB1, 0x7D, 0x14, 0x4A, 0x4C, 0x32, 0xFE, 0xB7, 0xB8, 0xB4, 0xB4,
    0xE1, 0x56, 0x7A, 0x9D, 0xF1, 0x20, 0x15, 0x90, 0x5C, 0xB6, 0x8E, 0x49, 0x2E, 0x73, 0x4E, 0x8C,
    0x98, 0x7E, 0xCE, 0xFE, 0x5D, 0x0A, 0xF0, 0x23, 0x75, 0x1A, 0xB7, 0xBA, 0x86, 0xF9, 0xA1, 0x86,
    0x4E, 0x98, 0x2C, 0xB5, 0xE1, 0xF7, 0xD5, 0x9F, 0x3C, 0xA8, 0x2B, 0xD6, 0x64, 0x67, 0x8F, 0x19,
    0x59, 0xCB, 0x29, 0x43, 0x21, 0xBB, 0x0E, 0xFA, 0x9D, 0xA4, 0x1E, 0x0F, 0xA6, 0x7B, 0xBC, 0x34,
    0x24, 0xA4, 0x84, 0x9A, 0x7F, 0x8F, 0x1E, 0x62, 0x0B, 0x66, 0x5C, 0x5F, 0xD0, 0x7F, 0x19, 0x59,
    0xC4, 0xC4, 0x83, 0xE0, 0xE0, 0x8A, 0xAE, 0x9C, 0xC1, 0x00, 0xA8, 0xB3, 0x02, 0x4F, 0x29, 0xFF,
    0xF9, 0xC6, 0x29, 0xDE, 0xAB, 0xC8, 0x83, 0x01, 0x86, 0xC9, 0x78, 0x2D, 0x53, 0x54, 0x4A, 0xCB,
    0xD9, 0xEA, 0xE4, 0xE8, 0x31, 0x0F, 0x53, 0x24, 0x01, 0x69, 0xE4, 0xF9, 0xEB, 0xB7, 0x1F, 0x06,
    0x30, 0x6F, 0x6A, 0x6C, 0x90, 0x83, 0x00, 0x34, 0xA9, 0x54, 0xAB, 0x5D, 0xA3, 0x9E, 0xE2, 0xAE,
    0x86, 0xBC, 0x45, 0xB1, 0xC6, 0x91, 0x4F, 0x70, 0x3A, 0xE1, 0x9C, 0x68, 0xCA, 0x95, 0x0B, 0xDC,
    0x30, 0x2A, 0x6A, 0xCE, 0x72, 0x92, 0xCC, 0x78, 0xF2, 0x7D, 0x22, 0x7F, 0x82, 0x09, 0x6A, 0xBB,
    0x25, 0x05, 0x4B, 0x85, 0xC4, 0xE7, 0x5E, 0x83, 0xD1, 0xD0, 0x40, 0x8A, 0x31, 0x2A, 0x40, 0x03,
    0x8B, 0x8E, 0xA3, 0xC5, 0xA1, 0xCD, 0xC1, 0xCA, 0x0E, 0xD3, 0x06, 0xFD, 0x8A, 0x65, 0x4B, 0xEC,
    0x80, 0x70, 0xA7, 0x49, 0xD0, 0xDE, 0xF1, 0x79, 0x7D, 0x7C, 0x78, 0x76, 0x92, 0xBA, 0x46, 0x35,
    0x0B, 0x1F, 0x36, 0x1E, 0x18, 0xF0, 0x97, 0x18, 0xE9, 0x3F, 0xC5, 0x48, 0x9D, 0x8A, 0x11, 0x88,
    0x6B, 0x64, 0x8C, 0xD2, 0xBA, 0x04, 0xEB, 0x35, 0x38, 0x6C, 0xF0, 0x29, 0x9E, 0xC1, 0xDE, 0xE0,
    0xE9, 0x73, 0xAC, 0x94, 0xB1, 0xB5, 0xF9, 0xEF, 0x14, 0xE1, 0x9F, 0x28, 0x34, 0xFF, 0xF9, 0x5F,
    0x21, 0x3A, 0x19, 0x20, 0x74, 0xA4, 0x99, 0x63, 0xDD, 0xC8, 0xB1, 0xAE, 0xBC, 0x3A, 0x4E, 0x35,
    0xB2, 0xD5, 0xD9, 0xAD, 0xE8, 0x0E, 0x35, 0x96, 0x16, 0x0F, 0xCD, 0x26, 0x13, 0x40, 0x36, 0x42,
    0x1D, 0xED, 0xF6, 0xD6, 0x05, 0x01, 0x7C, 0xE6, 0xAE, 0x42, 0xD1, 0x14, 0x50, 0x0B, 0x1B, 0x93,
    0x43, 0x81, 0x59, 0x72, 0x11, 0x43, 0x3B, 0xAE, 0x20, 0x9C, 0xA8, 0x51, 0xB4, 0x62, 0x4B, 0x3A,
    0x54, 0x10, 0x20, 0x4B, 0xC0, 0x1A, 0x28, 0x11, 0xED, 0x9E, 0xE3, 0x8D, 0x08, 0x99, 0xBF, 0x0A,
    0x45, 0x19, 0x21, 0xD5, 0x2C, 0xCE, 0xF9, 0x8F, 0x0B, 0xFD, 0x15, 0x74, 0x22, 0xBA, 0xCB, 0xF2,
    0x29, 0x64, 0x36, 0xC2, 0x4E, 0x07, 0xD1, 0x66, 0xC6, 0x31, 0x9D, 0xCC, 0xEC, 0xF9, 0x8C, 0x96,
    0x65, 0x99, 0x24, 0xB3, 0xEF, 0x9E, 0xD5, 0xC0, 0xAD, 0xC5, 0x49, 0xC6, 0x59, 0x31, 0x10, 0x73,
    0x2E, 0x97, 0x30, 0x7B, 0xCD, 0x3D, 0x8B, 0xFA, 0xF6, 0x37, 0x86, 0xD1, 0x54, 0x9D, 0x78, 0x34,
    0xBE, 0xBF, 0xE1, 0x81, 0x4C, 0xC0, 0x17, 0x3C, 0xB7, 0x82, 0x4A, 0xFF, 0x66, 0x17, 0xF6, 0xDA,
    0xBF, 0xF7, 0x2B, 0xBA, 0xEB, 0x7A, 0xBF, 0x15, 0x1F, 0x36, 0x3E, 0x8C, 0x85, 0x41, 0xFF, 0xF3,
    0xE0, 0xE1, 0xBB, 0xFE, 0xC3, 0xD3, 0xA7, 0xEF, 0xFB, 0x2F, 0xFB, 0x8F, 0x7F, 0xC3, 0xF9, 0xE6,
    0xED, 0xE0, 0xF9, 0x9B, 0xD7, 0xA7, 0xCF, 0x1E, 0x7D, 0x18, 0x0C, 0x7E, 0x77, 0xF6, 0xE6, 0xC3,
    0xE0, 0xB4, 0x35, 0x2E, 0xFB, 0x91, 0xBB, 0x64, 0x0E, 0xF9, 0x38, 0xD6, 0x3E, 0x8E, 0x82, 0x9E,
    0x8E, 0x49, 0x92, 0x89, 0xE4, 0x3B, 0x09, 0xAF, 0x39, 0x30, 0x9D, 0x64, 0x0E, 0x73, 0xDD, 0x61,
    0xE6, 0x72, 0xA9, 0x78, 0x2A, 0x7F, 0xE4, 0x24, 0xBC, 0xD1, 0x40, 0x99, 0x4D, 0x4C, 0xC2, 0x9B,
    0x0D, 0x14, 0x86, 0x97, 0x84, 0xB7, 0x9A, 0x18, 0xA0, 0x29, 0x48, 0x78, 0xBB, 0x89, 0x5A, 0x2E,
    0xE0, 0x62, 0xDC, 0x44, 0xFC, 0x98, 0x71, 0x9E, 0x91, 0xF0, 0xAE, 0xC3, 0x39, 0xF0, 0xAC, 0xEB,
    0xE0, 0xEF, 0x7C, 0x6D, 0xB5, 0x9F, 0x9D, 0xD5, 0x98, 0x45, 0xC1, 0x95, 0x02, 0xD4, 0xB5, 0x1A,
    0x85, 0x72, 0xCF, 0x8C, 0xD1, 0x1E, 0x20, 0x5C, 0x09, 0xF9, 0xCA, 0xD6, 0x1B, 0x37, 0xF5, 0xD6,
    0xEA, 0x42, 0xC1, 0xE1, 0xED, 0xB3, 0xA4, 0xE1, 0x59, 0xE5, 0x8C, 0x5A, 0x4E, 0xE6, 0x42, 0x03,
    0x6F, 0xE5, 0x8A, 0xC8, 0x17, 0x4B, 0x84, 0x2B, 0x47, 0xCE, 0x61, 0x43, 0xA0, 0xAE, 0xCA, 0x0B,
    0xB8, 0x93, 0x60, 0x67, 0xC3, 0xD2, 0x58, 0x02, 0xB6, 0x72, 0xC5, 0xF6, 0x3E, 0x20, 0xEE, 0xEE,
    0x10, 0xAC, 0x48, 0x66, 0x10, 0xD9, 0xCA, 0x11, 0x30, 0x99, 0x6B, 0x80, 0xC1, 0x0D, 0xDC, 0xBC,
    0x46, 0x13, 0x74, 0xA1, 0x48, 0xA1, 0x0C, 0xAB, 0x94, 0xC1, 0xCE, 0x33, 0x35, 0x8E, 0x77, 0x2E,
    0x0E, 0x13, 0x00, 0xD6, 0x28, 0xD6, 0xAB, 0x6B, 0x4C, 0xA0, 0xC2, 0x6E, 0x8E, 0x6C, 0x61, 0xEE,
    0x5C, 0xA3, 0xBD, 0xFA, 0x39, 0x10, 0xDB, 0xAD, 0x0A, 0xD4, 0xDC, 0x23, 0x1C, 0xE5, 0x10, 0x1F,
    0x97, 0x78, 0x9D, 0x78, 0x7A, 0x10, 0x90, 0x33, 0x08, 0x88, 0x86, 0x68, 0xFC, 0x89, 0x25, 0xB2,
    0x6D, 0x6E, 0xA6, 0xEF, 0xFE, 0xE8, 0x35, 0x3D, 0x5F, 0xED, 0x87, 0x76, 0x7B, 0x37, 0x97, 0x84,
    0xEB, 0xFC, 0x03, 0x1E, 0xB8, 0x56, 0xED, 0xF1, 0xB0, 0xFA, 0x76, 0x3C, 0xFB, 0xCD, 0x6E, 0xC7,
    0xF2, 0x05, 0x3A, 0x3F, 0x8F, 0xBB, 0xBE, 0x8C, 0x67, 0xD5, 0x75, 0x35, 0xBF, 0x27, 0xA3, 0x1C,
    0xAE, 0xAC, 0xB3, 0x61, 0x3E, 0xAE, 0x26, 0xDE, 0x76, 0x6B, 0xA5, 0x1A, 0x9C, 0x48, 0xC1, 0x9E,
    0x3D, 0xA7, 0x1C, 0xDA, 0x27, 0xE7, 0x2C, 0x53, 0x9C, 0x34, 0x1D, 0x2C, 0x4B, 0xF8, 0x03, 0x52,
    0xE3, 0xB7, 0x0F, 0xC6, 0xD7, 0x5B, 0x0F, 0x5F, 0x29, 0x44, 0x4C, 0xC0, 0x6A, 0xEB, 0xD0, 0xA5,
    0x8D, 0xF5, 0x3C, 0x24, 0x97, 0x3A, 0xBC, 0x73, 0x89, 0xF8, 0x44, 0xA4, 0x06, 0xD0, 0x06, 0x30,
    0x43, 0xD5, 0xC0, 0x0A, 0x61, 0xA7, 0x3B, 0xBC, 0xD4, 0x11, 0x1D, 0x52, 0x92, 0x08, 0x32, 0x5F,
    0xBF, 0x45, 0xB6, 0xDB, 0xFB, 0x6F, 0x99, 0xB0, 0x3D, 0xF2, 0x14, 0x7C, 0x2D, 0x17, 0x73, 0xB7,
    0x0E, 0xAF, 0x7E, 0x19, 0x8E, 0xC6, 0x7E, 0xB8, 0x29, 0x47, 0x6A, 0x7C, 0xF9, 0xE2, 0x55, 0xD8,
    0x27, 0x0A, 0x07, 0x5B, 0xCA, 0x34, 0x83, 0x9B, 0x30, 0x5C, 0xFA, 0x12, 0xEE, 0x5D, 0x1D, 0x8D,
    0x86, 0x64, 0x34, 0x1A, 0x5D, 0x9D, 0x9C, 0xE7, 0x85, 0x5E, 0x8E, 0xAF, 0x4E, 0x7D, 0xF2, 0x80,
    0xD0, 0xFA, 0x9C, 0x0C, 0xBF, 0xE0, 0x79, 0x3E, 0x2A, 0xC6, 0x97, 0xC9, 0x16, 0x37, 0xFF, 0xD6,
    0x44, 0x60, 0x8B, 0x7D, 0xB0, 0xBD, 0xD2, 0x1B, 0xA5, 0x1D, 0xAF, 0x17, 0x8E, 0x82, 0x51, 0x7A,
    0x99, 0xF6, 0xE0, 0x69, 0xC8, 0xFB, 0xE3, 0x61, 0x67, 0x74, 0x65, 0x8C, 0x27, 0xB4, 0x87, 0xF2,
    0xC6, 0x4D, 0x79, 0x40, 0xF2, 0x65, 0x1B, 0x6E, 0x7D, 0x8A, 0x5C, 0xEA, 0xF2, 0x68, 0x48, 0x3B,
    0x48, 0x43, 0xAA, 0xE9, 0x88, 0xD6, 0xC5, 0x2F, 0xDE, 0xBF, 0x79, 0x1D, 0x2C, 0x58, 0xA1, 0xB8,
    0xB3, 0x97, 0x46, 0x04, 0xF2, 0x0A, 0xA5, 0x61, 0x8C, 0xC7, 0x10, 0xE2, 0xF6, 0x33, 0x09, 0xDA,
    0x61, 0x7C, 0x7C, 0xC2, 0x14, 0x55, 0x13, 0xD7, 0xC1, 0x6E, 0x57, 0xF9, 0x5D, 0xB8, 0x15, 0xAA,
    0x7D, 0x21, 0xED, 0x76, 0x3D, 0xA7, 0x4F, 0x73, 0xD1, 0xDE, 0x69, 0xBC, 0x91, 0xE1, 0xD6, 0xEE,
    0x6F, 0x45, 0xD4, 0x5B, 0x18, 0xAA, 0xE9, 0x0F, 0xA7, 0xB5, 0x30, 0xBC, 0x35, 0x72, 0x88, 0xEE,
    0x05, 0x0E, 0x50, 0xE5, 0x7B, 0x99, 0xFF, 0x50, 0xA7, 0x3F, 0x2A, 0x44, 0x8D, 0xF5, 0xA5, 0x8B,
    0xF5, 0xE6, 0xE8, 0x23, 0x82, 0x53, 0x5B, 0xB3, 0x99, 0x35, 0xF9, 0x89, 0x4F, 0xDE, 0x1B, 0xC8,
    0xAB, 0x3E, 0x43, 0xF8, 0x43, 0xC2, 0x8A, 0x74, 0x29, 0x72, 0x49, 0xC6, 0x60, 0x42, 0x82, 0xCB,
    0x12, 0xAA, 0xC8, 0x7C, 0xD6, 0x90, 0xF0, 0x92, 0xF0, 0x83, 0x15, 0x39, 0xBE, 0xB2, 0xDA, 0x57,
    0xEF, 0x7D, 0x91, 0x47, 0x3A, 0x02, 0x99, 0x27, 0x99, 0x54, 0x3C, 0x3E, 0x5F, 0xE6, 0x09, 0x9A,
    0xE3, 0xC1, 0x4A, 0xE4, 0xF5, 0xB7, 0x8F, 0xBD, 0x45, 0x8B, 0x78, 0xB3, 0x69, 0xF1, 0xE1, 0xF4,
    0xAA, 0x05, 0xF7, 0xCD, 0x82, 0xE5, 0xD7, 0xE1, 0xFF, 0x91, 0x2A, 0x09, 0x77, 0xF1, 0xD3, 0x9A,
    0xBA, 0xC7, 0xD4, 0x10, 0xF0, 0x42, 0x16, 0xBF, 0x31, 0xEC, 0x04, 0xF9, 0x1C, 0xD6, 0x04, 0x9B,
    0x1E, 0x7A, 0x02, 0x1D, 0xA6, 0xC1, 0x94, 0x1F, 0x22, 0x87, 0xCD, 0x02, 0x54, 0x13, 0x0E, 0x73,
    0x88, 0x2F, 0xF3, 0x4C, 0xB2, 0xF4, 0x80, 0xB4, 0x16, 0x66, 0x42, 0xE2, 0x51, 0x9C, 0x15, 0x26,
    0x6B, 0x6A, 0x71, 0x1E, 0x39, 0x09, 0xEE, 0x23, 0x52, 0xEC, 0x7E, 0xFD, 0x4C, 0x25, 0xB5, 0x8D,
    0xF5, 0xBD, 0xEA, 0x37, 0xDF, 0x4A, 0x08, 0x50, 0x8B, 0x85, 0x36, 0xD7, 0x1D, 0x55, 0x24, 0x31,
    0xF7, 0x77, 0x84, 0x13, 0x99, 0xAE, 0x0F, 0xDE, 0x9F, 0x7D, 0x0F, 0x35, 0x9B, 0x32, 0x70, 0xEA,
    0xA8, 0x0D, 0xB0, 0x8F, 0x78, 0x77, 0x9B, 0xD9, 0x97, 0x70, 0xF8, 0xA2, 0x38, 0xC9, 0xC0, 0x23,
    0x52, 0xFA, 0x38, 0x70, 0x5E, 0x1D, 0x04, 0xA8, 0x1E, 0x82, 0x28, 0xAE, 0xDD, 0x36, 0x42, 0x1B,
    0xB3, 0xB1, 0xDC, 0x89, 0x3E, 0xDE, 0x55, 0xE4, 0xC9, 0x9B, 0x57, 0x8F, 0x61, 0x39, 0x22, 0x0E,
    0x22, 0xC9, 0x53, 0x58, 0x25, 0x50, 0x00, 0x10, 0x0D, 0x38, 0x43, 0x41, 0x60, 0xEC, 0x57, 0xF0,
    0x26, 0xF8, 0xA6, 0x08, 0xC4, 0x31, 0xFA, 0x05, 0x38, 0x6F, 0xE3, 0x53, 0x82, 0x13, 0x00, 0x00

};

static const uint8_t loader_html_gz[] PROGMEM = {

    0x1F, 0x8B, 0x08, 0x08, 0x3E, 0x8C, 0xB1, 0x5E, 0x04, 0x00, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x72,
    0x2E, 0x68, 0x74, 0x6D, 0x6C, 0x00, 0x95, 0x53, 0x4D, 0x73, 0xDA, 0x30, 0x10, 0xFD, 0x2B, 0x66,
    0xC3, 0x78, 0xA4, 0x58, 0x15, 0x24, 0xED, 0x29, 0x20, 0x38, 0x24, 0xB4, 0x39, 0x24, 0x43, 0x26,
    0xE1, 0xD0, 0x0E, 0xE5, 0xE0, 0xDA, 0x0B, 0x28, 0x63, 0x24, 0x57, 0x16, 0x5F, 0x03, 0xFC, 0xF7,
    0xAE, 0xB1, 0x61, 0x92, 0x4E, 0x2E, 0x39, 0x58, 0xF2, 0x4A, 0xBB, 0x6F, 0xDF, 0xBE, 0xD5, 0x76,
    0x1B, 0x77, 0xC3, 0xDB, 0xD1, 0xAF, 0xA7, 0x41, 0x30, 0xF7, 0x8B, 0xAC, 0xD7, 0xAD, 0x57, 0x8C,
    0xD3, 0x5E, 0xB7, 0x55, 0x6D, 0x7F, 0x6C, 0xBA, 0xED, 0x75, 0x8B, 0xC4, 0xE9, 0xDC, 0xF7, 0xA6,
    0x4B, 0x93, 0x78, 0x6D, 0x4D, 0x90, 0xD9, 0x38, 0xBD, 0xB3, 0x09, 0xE3, 0xBB, 0x55, 0xEC, 0x02,
    0x54, 0x06, 0xD7, 0xC1, 0xCF, 0xC7, 0x87, 0x7B, 0xEF, 0xF3, 0x67, 0xFC, 0xBB, 0xC4, 0xC2, 0x77,
    0x50, 0x5A, 0xE3, 0x08, 0x62, 0x5B, 0xF8, 0xD8, 0x63, 0x32, 0x8F, 0xCD, 0x0C, 0xD5, 0x09, 0x80,
    0x02, 0xF5, 0x94, 0x7D, 0x53, 0xCA, 0xCF, 0x75, 0x21, 0x8F, 0x6E, 0x2F, 0xA5, 0x5B, 0x18, 0x5E,
    0xB7, 0xDB, 0xF5, 0x69, 0x19, 0xB7, 0x2C, 0xF8, 0x2E, 0x43, 0x1F, 0x78, 0xC5, 0xCA, 0x14, 0x77,
    0xC3, 0xC7, 0xA7, 0xD8, 0x15, 0xE8, 0xB8, 0xCC, 0xCB, 0xFD, 0xBB, 0xB3, 0x8B, 0x17, 0xEF, 0xB4,
    0x99, 0xB1, 0x1A, 0xA8, 0xC8, 0xAD, 0x29, 0x70, 0x84, 0x1B, 0x2F, 0xC0, 0xD3, 0xDA, 0x2A, 0x4B,
    0x02, 0xDE, 0xA9, 0x68, 0xA6, 0x36, 0x59, 0x2E, 0xD0, 0x78, 0x99, 0x38, 0xA4, 0x6C, 0x83, 0x0C,
    0x4B, 0x8B, 0x41, 0x55, 0x1E, 0xB9, 0xA1, 0xF4, 0xDB, 0x1C, 0x55, 0x15, 0xFA, 0x1A, 0xAF, 0xE2,
    0xFA, 0x46, 0xA0, 0x2C, 0x5C, 0xA2, 0x80, 0xF0, 0xA7, 0xD6, 0x2D, 0xE4, 0x6B, 0x01, 0xC2, 0xCB,
    0x52, 0x1B, 0x19, 0xE7, 0x39, 0x9A, 0xF4, 0x76, 0xAE, 0xB3, 0x94, 0x21, 0x17, 0xE7, 0x14, 0x6B,
    0xA7, 0x3D, 0x32, 0x2F, 0x4F, 0x07, 0x75, 0x32, 0xA9, 0x8D, 0x41, 0x77, 0x3F, 0x7A, 0x7C, 0xE0,
    0x62, 0x65, 0x75, 0x1A, 0xB4, 0x1B, 0xEA, 0xC4, 0xAB, 0x42, 0x0C, 0xC3, 0xFF, 0x4C, 0xF6, 0xCE,
    0x26, 0x5D, 0xB6, 0x19, 0xCA, 0x54, 0x17, 0x79, 0x16, 0x6F, 0x15, 0x18, 0x6B, 0x10, 0xDE, 0xE4,
    0x4D, 0x32, 0x5B, 0x20, 0xE3, 0x87, 0x03, 0x71, 0xB6, 0x44, 0x8D, 0xC1, 0x8F, 0xC1, 0x08, 0xC4,
    0x59, 0x79, 0x14, 0x5E, 0x18, 0xBE, 0xC3, 0xFD, 0x9E, 0xA1, 0x5A, 0x6B, 0x93, 0xDA, 0xB5, 0xCC,
    0x6C, 0x12, 0x97, 0x97, 0x72, 0xEE, 0x70, 0x5A, 0x89, 0x65, 0x85, 0x3B, 0x76, 0xF5, 0x19, 0x67,
    0x83, 0x4D, 0xCE, 0x80, 0x8D, 0xFB, 0xE1, 0x84, 0x43, 0xE4, 0x23, 0x50, 0xF2, 0xB2, 0xCF, 0xC2,
    0xFD, 0xC5, 0xBE, 0xC9, 0x99, 0xBC, 0xE4, 0x20, 0x60, 0xA6, 0x49, 0x3B, 0x6A, 0xA8, 0x93, 0x9E,
    0x5A, 0x4F, 0x32, 0x70, 0x87, 0x7E, 0xE9, 0x4C, 0x60, 0x96, 0x59, 0xD6, 0x50, 0xA6, 0x8F, 0xD4,
    0x1A, 0xA2, 0x9B, 0x20, 0x73, 0x02, 0x9A, 0x57, 0x15, 0x0C, 0x44, 0x26, 0x82, 0xE6, 0x75, 0xF3,
    0x2B, 0xF0, 0x1B, 0xE2, 0xC2, 0xAC, 0x42, 0x49, 0x45, 0x69, 0x6A, 0xC8, 0x05, 0x70, 0x3E, 0x6E,
    0x4F, 0xDE, 0x47, 0x95, 0x8E, 0xE7, 0x93, 0x16, 0x31, 0xF8, 0xDD, 0xE7, 0xCD, 0x96, 0x00, 0x78,
    0xA3, 0xA4, 0x1D, 0x5F, 0x4D, 0xC2, 0xB0, 0x4C, 0x7B, 0x36, 0x18, 0x46, 0x8A, 0x00, 0xA3, 0xD2,
    0xE2, 0x02, 0x8F, 0x44, 0x6B, 0x5E, 0xD5, 0xF3, 0xD5, 0xEA, 0xCB, 0x15, 0x79, 0xA3, 0x24, 0x31,
    0x70, 0x33, 0x9C, 0x32, 0xE8, 0x03, 0xEF, 0x43, 0x08, 0x37, 0xF4, 0xD3, 0xA9, 0x2B, 0xF9, 0x90,
    0x5F, 0xA4, 0x4F, 0x85, 0x7C, 0x86, 0xC1, 0xE1, 0x04, 0x79, 0x60, 0x1F, 0xE9, 0x2F, 0x8E, 0xAF,
    0x0C, 0x44, 0x9B, 0x8B, 0x06, 0x7D, 0x94, 0x93, 0xDE, 0x17, 0x35, 0xF4, 0x3C, 0x73, 0x9D, 0x6E,
    0xAB, 0x9E, 0xC7, 0x6E, 0xEB, 0x38, 0x9E, 0xFF, 0x00, 0x5E, 0x6F, 0xDA, 0xF2, 0xC7, 0x03, 0x00,
    0x00

};

enum ESPFormStorageType
{
    esp_form_storage_flash = 1,
    esp_form_storage_sd = 2
};

typedef void (*IdleTimeoutCallback)(void);

typedef struct idle_timeout_t
{
    uint8_t _clientCount = 0;
    unsigned long _idleTimeTimeout = 10 * 60 * 1000;
    unsigned long _idleTime = 0;
    bool _idleStarted = false;
    bool _serverStarted = false;
    bool _serverRun = false;
    IdleTimeoutCallback _idleTimeoutCallback = nullptr;

} IdleTimeout_t;

#ifdef ESP32
static std::vector<std::reference_wrapper<WebServer>> _webServer;
static std::vector<std::reference_wrapper<WebSocketsServer>> _webSocket;
static std::vector<std::reference_wrapper<IdleTimeout_t>> _idleTimeoutInfo;
static uint8_t objIndex __attribute__((used)) = 0;
#endif

class WiFiInfo;

class ESPFormClass
{

public:
    typedef enum esp_form_event_type
    {
        EVENT_UNDEFINED = 0,
        EVENT_ON_CLICK = 1,
        EVENT_ON_DBLCLICK = 2,
        EVENT_ON_MOUSEDOWN = 3,
        EVENT_ON_MOUSEMOVE = 4,
        EVENT_ON_MOUSEOUT = 5,
        EVENT_ON_MOUSEOVER = 6,
        EVENT_ON_MOUSEUP = 7,
        EVENT_ON_MOUSEWHEEL = 8,
        EVENT_ON_WHEEL = 9,
        EVENT_ON_KEYDOWN = 10,
        EVENT_ON_KEYPRESS = 11,
        EVENT_ON_KEYUP = 12,
        EVENT_ON_CHANGE = 13,
        EVENT_ON_SUBMIT = 14,
        EVENT_ON_INPUT = 15,
        EVENT_ON_FOCUS = 16,
        EVENT_ON_CONTEXTMENU = 17,
        EVENT_ON_SELECT = 18,
        EVENT_ON_SEARCH = 19,
        EVENT_ON_RESET = 20,
        EVENT_ON_INVALID = 21,

    } ESPFormEventType;

    typedef struct html_element_item_t
    {
        String id = "";
        ESPFormEventType event;
        String value = "";
        String type = "";
        bool success = false;

    } HTMLElementItem;

    typedef struct network_info_t
    {
        String ssid = "";
#if defined(ESP32)
        wifi_auth_mode_t encType = WIFI_AUTH_OPEN;
#elif defined(ESP8266)
        wl_enc_type encType = ENC_TYPE_NONE;
#endif
        uint8_t quality = 0;
        uint8_t channel = 1;
    } NetworkInfo;

    typedef void (*ElementEventCallback)(HTMLElementItem);
    typedef void (*WiFiScanResultItemCallback)(NetworkInfo);

#if defined(ESP32)
    typedef wifi_auth_mode_t EncriptionType;
#elif defined(ESP8266)
    typedef wl_enc_type EncriptionType;
    typedef std::function<void(void)> callback_function_t;
#endif

    ESPFormClass();
    ~ESPFormClass();

    /** Terminate the web server and free resources.
     */
    void terminateServer();

    /** Get the number of HTML resource files and data (.html, .css, .js...) added for webpage rendering.
     * @return - The number or resources that added and use for webpage.
     */
    size_t getFileCount();

    /** Delete all HTML resource files that added for webpage rendering.
     */
    void deleteAllFiles();

    /** Add the HTML resource data in the form of raw string from SPIFFS (PROGMEM) for webpage rendering.
     * @param content The PROGMEM (constant char array) data.
     * @param fileName The name of resource file (constant char array) in the form of URI e.g., /image.png.
     */
    void addFileData(PGM_P content, const char *fileName);

    /** Add the HTML resource data in the form of byte array w/wo compression from SPIFFS (PROGMEM) for webpage rendering.
     * @param content The constant uint8_t array data.
     * @param fileName The name of resource file (constant char array) in the form of URI e.g., /image.png.
     * @param length The length of data.
     * @param gzip The gzip compression option. Set to true if the array data is the gzip compressed data.
     */
    void addFileData(const uint8_t *content, const char *fileName, size_t length, bool gzip);

    /** Add the HTML resource file from SPIFFS or SD/microSD for webpage rendering.
     * @param fileName The name of resource file (constant char array) in the form of URI e.g., /image.png.
     * @param filePath The full file path in SPIFFS or SD card.
     * @param storagetype The type of storage of file e.g., esp_form_storage_flash or esp_form_storage_sd.
     */
    void addFile(const char *fileName, const char *filePath, ESPFormStorageType storagetype);

    /** Run the javascript in the client's browser.
     * @param script The string that represents the variables, objcts, array and functions in javascript.
     */
    void runScript(const String &script);

    /** Set the Soft AP configuration.
     * @param ssid The Soft AP's SSID (less than 32 characters).
     * @param psw The Soft AP's Password (between 8 to 63 characters).
     * @param channel The Soft AP's channel.
     * @param ssid_hidden The option to show or hide the SSID for clients.
     * @param max_connection The maximum clients to connected (default value is 4).
     */
    void setAP(const char *ssid, const char *psw, int channel = 1, int ssid_hidden = 0, int max_connection = 4);

    /** Stop Access Point.
     */
    void stopAP();

    /** Set the Soft AP static IPs.
     * @param local_ip The Soft AP's fixed IP.
     * @param gateway The Soft AP's default gateway IP.
     * @param subnet The Soft AP's subnet mask.
     */
    void setIP(IPAddress local_ip, IPAddress gateway, IPAddress subnet);

    /** Start the web server.
     */
    void startServer();

    /** Stop the web server.
     */
    void stopServer();

    /** Initiate the library with callback functions and debug enable option.
     * @param eventCallback The HTML Form Element event callback function to receive the event data.
     * @param timeoutCallback The server timeout callback function when no clients connected to device within the specific duration.
     * @param timeout The server timeout duration.
     * @param debug The debug enable option.
     */
    void begin(ElementEventCallback eventCallback, IdleTimeoutCallback timeoutCallback = nullptr, unsigned long timeout = 600000, bool debug = false);

    /** Add or register the HTML Form Element's event.
     * @param id The id of HTML Form Element (id attribute).
     * @param event The number of ESPFormEventType enumeration e.g. EVENT_ON_CLICK = 1, EVENT_ON_DBLCLICK = 2, and EVENT_ON_MOUSEDOWN = 3.
     * @param defaultValue The default value of HTML Form Element.
     */
    void addElementEventListener(const String &id, ESPFormEventType event, const char *defaultValue = NULL);

    /** Save the HTML Form Element's event items and their value as file (json format).
     * @param fileName The file name to save.
     * @param storagetype The type of storage of file e.g., esp_form_storage_flash or esp_form_storage_sd.
     */
    void saveElementEventConfig(const String &fileName, ESPFormStorageType storagetype);

    /** Load the HTML Form Element's event items and their value from file
     * @param fileName The file name to read.
     * @param storagetype The type of storage of file e.g., esp_form_storage_flash or esp_form_storage_sd.
     */
    void loadElementEventConfig(const String &fileName, ESPFormStorageType storagetype);

    /** Read or get a HTML Form Element item value that loaed from file or added with function addElementEventListener.
     * @param id The id of item.
     * @return HTMLElementItem type data. The HTMLElementItem data comprises of id, event, value, type and success properties.
     *
     * The id property is the HTML Form Element id attribute.
     * The value property is the HTML Form Element value or innerText attribute (depends on type of HTML element).
     * The type is the types of data e.g event (HTML Form Element event trigged) and get (device requests the value from HTML Form Element).
     * The event property is the name of HTML Form Element events e.g. onchange, onsubmit and onclick.
     * The event property value is the number of ESPFormEventType enumeration e.g. **EVENT_ON_CHANGE** = 13, and **EVENT_ON_CLICK** = 1.
     * The success property is the boolean value that sets to true if the id of item or HTML Form Element found in the config file or has been added with addElementEventListener.
     */
    ESPFormClass::HTMLElementItem getElementEventConfigItem(const String &id);

    /** Set the HTML Form Element items (locally in device).
     * @param element - The HTMLElementItem type data that comprises of id, event, value, type and success properties.
     * Required save to file to save changes.
     */
    void setElementEventConfigItem(HTMLElementItem &element);

    /** Remove the HTML Form Element items (locally in device).
     * @param id The id of the HTML Form Element.
     * Required save to file to save changes.
     */
    void removeElementEventConfigItem(const String &id);

    /** Read or get a HTML Form Element value from client.
     * @param id The id of the HTML Form Element.
     * The returning value will receive by the event callback function with HTMLElementItem which its type is 'get'.
     */
    void getElementContent(const char *id);

    /** Set or change a HTML Form Element value (local item and client element values changed).
     * @param id The id of the HTML Form Element.
     * @param id The content or value to set.
     * Required save to file to save changes.
     */
    void setElementContent(const char *id, const String &content);

    /** Clear all HTML Form Element in config or added with addElementEventListener.
     * Required save to file to save changes.
     */
    void clearElementEventConfig();

    /** Get the HTML Form Element Event (ESPFormEventType) as string.
     * @param event The ESPFormEventType enumeration value.
     * @return String of event.
     */
    String getElementEventString(ESPFormEventType event);

    /** Get the WiFi encryption method (EncriptionType) as string.
     * @param encType The EncriptionType enumeration value.
     * @return String of encType.
     * The EncriptionType is the name of wifi_auth_mode_t (ESP32) or wl_enc_type (ESP8266);
     */
    String getWiFiEncrytionTypeString(EncriptionType encType);

    /** Scan WiFi network and get the result as WiFiInfo type data.
     * @param scanCallback The WiFiScanResultItemCallback callback function that accepted the
     * NetworkInfo data i.e. ssid, encType, channel and quality.
     * @param max The maximum network list in the scan result.
     * @param showHidden The option to inclued the hidden netwok.
     */
    void scanWiFi(WiFiScanResultItemCallback scanCallback, uint8_t max = 10, bool showHidden = false);

    /** Get the number of connected clients at the present.
     * @return Number of clients.
     */
    size_t getClientCount();

    /** Get the HTML Form Element numbers that loaded or added.
     * @return The number of HTML Form Element.
     */
    size_t getElementCount();

    /** Set the device time via NTP server.
     * @param offset The GMT offset.
     * @return bool status indicates the success of operation.
     */
    bool setClock(float offset);

#if defined(MBFS_SD_FS) && defined(MBFS_CARD_TYPE_SD)

    /** Initiate SD card with SPI port configuration.
     *
     * @param ss SPI Chip/Slave Select pin.
     * @param sck SPI Clock pin.
     * @param miso SPI MISO pin.
     * @param mosi SPI MOSI pin.
     * @param frequency The SPI frequency
     * @return Boolean type status indicates the success of the operation.
     */
    bool sdBegin(int8_t ss = -1, int8_t sck = -1, int8_t miso = -1, int8_t mosi = -1, uint32_t frequency = 4000000);

#if defined(ESP8266)

    /** Initiate SD card with SD FS configurations (ESP8266 only).
     *
     * @param ss SPI Chip/Slave Select pin.
     * @param sdFSConfig The pointer to SDFSConfig object (ESP8266 only).
     * @return Boolean type status indicates the success of the operation.
     */
    bool sdBegin(SDFSConfig *sdFSConfig);

#endif

#if defined(ESP32)
    /** Initiate SD card with chip select and SPI configuration (ESP32 only).
     *
     * @param ss SPI Chip/Slave Select pin.
     * @param spiConfig The pointer to SPIClass object for SPI configuartion.
     * @param frequency The SPI frequency.
     * @return Boolean type status indicates the success of the operation.
     */
    bool sdBegin(int8_t ss, SPIClass *spiConfig = nullptr, uint32_t frequency = 4000000);
#endif

#if defined(MBFS_ESP32_SDFAT_ENABLED) || defined(MBFS_SDFAT_ENABLED)
    /** Initiate SD card with SdFat SPI and pins configurations (with SdFat included only).
     *
     * @param sdFatSPIConfig The pointer to SdSpiConfig object for SdFat SPI configuration.
     * @param ss SPI Chip/Slave Select pin.
     * @param sck SPI Clock pin.
     * @param miso SPI MISO pin.
     * @param mosi SPI MOSI pin.
     * @return Boolean type status indicates the success of the operation.
     */
    bool sdBegin(SdSpiConfig *sdFatSPIConfig, int8_t ss = -1, int8_t sck = -1, int8_t miso = -1, int8_t mosi = -1);

    /** Initiate SD card with SdFat SDIO configuration (with SdFat included only).
     *
     * @param sdFatSDIOConfig The pointer to SdioConfig object for SdFat SDIO configuration.
     * @return Boolean type status indicates the success of the operation.
     */
    bool sdBegin(SdioConfig *sdFatSDIOConfig);

#endif

#endif

#if defined(ESP32) && defined(MBFS_SD_FS) && defined(MBFS_CARD_TYPE_SD_MMC)
    /** Initialize the SD_MMC card (ESP32 only).
     *
     * @param mountpoint The mounting point.
     * @param mode1bit Allow 1 bit data line (SPI mode).
     * @param format_if_mount_failed Format SD_MMC card if mount failed.
     * @return The boolean value indicates the success of operation.
     */
    bool sdMMCBegin(const char *mountpoint = "/sdcard", bool mode1bit = false, bool format_if_mount_failed = false);
#endif

private:
    typedef struct
    {
        MB_String name;
        MB_String path;
        const char *content = nullptr;
        bool gzip = false;
        uint32_t len = 0;
        ESPFormStorageType storageType = esp_form_storage_flash;
    } file_content_info_t;

    IPAddress _ip;
    IPAddress _gateway;
    IPAddress _subnet;
    MB_String _ap_ssid;
    MB_String _ap_psw;
    bool _skip_self_ap = true;
    int _channel = 1;
    int _ssid_hidden = 0;
    int _max_connection = 4;
    bool _ipConfig = false;
    bool _task_created = false;
    int _index = -1;

#ifdef ESP32
    std::shared_ptr<WebServer> _web_server_ptr = nullptr;
    std::shared_ptr<WebSocketsServer> _web_socket_ptr = nullptr;
    TaskHandle_t _xTaskHandle = NULL;
    MB_String _taskName;
#elif defined(ESP8266)
    std::shared_ptr<DNSServer> _dns_server_ptr;
    std::shared_ptr<ESP8266WebServer> _web_server_ptr;
    std::shared_ptr<WebSocketsServer> _web_socket_ptr;
#endif

    const byte _dns_port = 53;
    const byte _web_server_port = 80;
    const byte _web_socket_port = 81;
    std::shared_ptr<FirebaseJsonArray> _form_config = std::shared_ptr<FirebaseJsonArray>(new FirebaseJsonArray());
    std::vector<file_content_info_t> _file_info = std::vector<file_content_info_t>();
    ElementEventCallback _elementEventCallback = nullptr;
#if defined(ESP8266)
    callback_function_t _callback_function = nullptr;
#endif
    bool _debug = false;
    bool _ap_started = false;
    MB_FS _mbfs;
    idle_timeout_t _idle_to;
    time_t _ts = 0;
    bool _esp_form_clock_rdy = false;
    bool _esp_form_clock_synched = false;
    float _esp_form_gmt_offset = 0;

    unsigned long _last_recon_millis = 0;
    unsigned long _reccon_tmo = 10000;

    void getPath(uint8_t type, int index, MB_String &buf);
    void startAP();
    void startDNSServer();
    void startWebServer();
    void startWebSocket();
    void handleNotFound();
    void getMIME(const String &ext, String &mime);
    bool handleFileRead();
    void goLandingPage();
    bool isIP(String str);
    String toIpString(IPAddress ip);
    void webSocketEvent(uint8_t num, WStype_t type, uint8_t *payload, size_t lenght);
    void serverRun();
    uint8_t getRSSIasQuality(int RSSI);
    bool reconnect();
    void prepareConfig();
    void int_scanWiFi(WiFiInfo *result, WiFiScanResultItemCallback scanCallback, uint8_t max = 10, bool showHidden = false);
#if defined(ESP8266)
    void set_scheduled_callback(callback_function_t callback);
#endif
    time_t getTime();
    bool syncClock(float gmtOffset);
};

class WiFiInfo
{
    friend class ESPFormClass;

public:
    WiFiInfo()
    {
    }
    ~WiFiInfo()
    {
        _r.clear();
    }
    size_t count()
    {
        return _r.size();
    }
    ESPFormClass::NetworkInfo getInfo(size_t index)
    {
        ESPFormClass::network_info_t r;
        if (index < _r.size())
            return _r[index];
        return r;
    }
    void clear()
    {
        _r.clear();
    }

private:
    std::vector<ESPFormClass::NetworkInfo> _r;
};

extern ESPFormClass ESPForm;

#endif